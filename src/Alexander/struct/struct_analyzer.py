import os
import sys
import clang.cindex

def generate_driver_code(header_path, function_name, struct_name):
    # Try to parse with clang, but don't let it fail the generation
    try:
        index = clang.cindex.Index.create()
        # Add include paths and standard arguments for better parsing
        args = ['-I/usr/include', '-I/usr/local/include', '-std=c99']
        tu = index.parse(header_path, args=args)
        
        # Check for parsing errors
        for diag in tu.diagnostics:
            print(f"Clang diagnostic: {diag.spelling}")
            if diag.severity >= clang.cindex.Diagnostic.Error:
                print(f"Warning: Parse error in {header_path}, but continuing with code generation")
                break
    except Exception as e:
        print(f"Warning: Could not parse {header_path} with clang: {e}")
        print("Continuing with code generation anyway...")

    template = f"""#include <stdint.h>
#include <klee/klee.h>
#include "{os.path.basename(header_path)}"
#include "symbolizer.h"

int main() {{
    {struct_name} obj;
    SYMBOLIZE_STRUCT(obj, {struct_name});
    {function_name}(&obj);
    return 0;
}}"""

    return template

if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: python struct_analyzer.py header.h function_name struct_name")
        sys.exit(1)
    
    header_path = sys.argv[1]
    function_name = sys.argv[2]
    struct_name = sys.argv[3]
    
    # Check if header file exists
    if not os.path.exists(header_path):
        print(f"Error: Header file {header_path} does not exist")
        sys.exit(1)
    
    print(f"Generating driver code for:")
    print(f"  Header: {header_path}")
    print(f"  Function: {function_name}")
    print(f"  Struct: {struct_name}")
    
    code = generate_driver_code(header_path, function_name, struct_name)
    
    output_file = "autogenerated_main.c"
    with open(output_file, "w") as f:
        f.write(code)
    
    print(f"Generated {output_file}")
    print("\nGenerated code:")
    print("-" * 40)
    print(code)
